---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import styles from './ImageWithoutSize.module.css';

type ImageSrc = ImageMetadata | Promise<{ default: ImageMetadata }>;
type ResolvedImageData = {
  src: string;
  srcSet?: {
    attribute: string;
  };
  attributes: Record<string, any>;
};
type OptimizedImage = {
  src: string;
  attributes: Record<string, any>;
};

interface Props {
  src: ImageSrc;
  alt: string;
  imageData?: ResolvedImageData;
  class?: string;
  widths?: number[];
  sizes?: string;
  format?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'auto' | 'sync';
  priority?: boolean;
  quality?: number | string;
  layout?: 'constrained' | 'fixed' | 'full-width' | 'none';
  fit?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down' | (string & {});
  position?: string;
  [key: string]: unknown;
}

const {
  src,
  alt,
  imageData,
  class: className,
  widths = [320, 640, 960, 1280, 1600],
  sizes = '100vw',
  format = 'webp',
  loading = 'lazy',
  decoding = 'async',
  priority = false,
  quality,
  layout,
  fit,
  position,
  ...rest
} = Astro.props as Props;

const baseClassList = [styles.image, className];
let optimizedImage: OptimizedImage | undefined;

if (imageData) {
  const { attributes = {}, srcSet } = imageData;
  const { class: imageClass, ...otherAttributes } = attributes ?? {};
  const classList = [...baseClassList];
  if (imageClass) {
    classList.push(imageClass);
  }
  const mergedAttributes = { ...otherAttributes, ...rest };
  if (srcSet?.attribute) {
    mergedAttributes.srcset = srcSet.attribute;
  }
  if (!mergedAttributes.sizes && sizes) {
    mergedAttributes.sizes = sizes;
  }
  mergedAttributes.alt ??= alt;
  mergedAttributes.class = classList.filter(Boolean).join(' ');
  optimizedImage = {
    src: imageData.src,
    attributes: mergedAttributes,
  };
}

const resolvedClass = baseClassList.filter(Boolean).join(' ');
---

{optimizedImage ? (
  <img src={optimizedImage.src} {...optimizedImage.attributes} />
) : (
  <Image
    src={src}
    alt={alt}
    class={resolvedClass}
    widths={widths}
    sizes={sizes}
    format={format}
    loading={loading}
    decoding={decoding}
    priority={priority}
    quality={quality}
    layout={layout}
    fit={fit}
    position={position}
    {...rest}
  />
)}
